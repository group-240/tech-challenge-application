name: üßπ Destroy Application - DANGER ZONE

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DESTROY-APPLICATION" to confirm deletion'
        required: true
        type: string
      force:
        description: 'Force destroy even with errors'
        required: false
        type: boolean
        default: false
      delete_ecr_images:
        description: 'Delete all ECR images'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  validate-confirmation:
    name: üîê Validate Destruction Request
    runs-on: ubuntu-latest
    steps:
      - name: Check Confirmation
        run: |
          if [ "${{ inputs.confirmation }}" != "DESTROY-APPLICATION" ]; then
            echo "‚ùå Confirmation failed! You must type exactly 'DESTROY-APPLICATION' to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation validated"
          echo "‚ö†Ô∏è WARNING: This will DELETE your application deployment!"

  destroy-kubernetes-resources:
    name: üóëÔ∏è Destroy Kubernetes Resources
    runs-on: ubuntu-latest
    needs: validate-confirmation
    
    steps:
      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîß Configure kubectl
        run: |
          aws eks update-kubeconfig --name tech-challenge-eks --region ${{ env.AWS_REGION }} || echo "EKS cluster not found"
        continue-on-error: true

      - name: üìã List Current Resources
        run: |
          echo "üìä Current Kubernetes Resources:"
          kubectl get all -n tech-challenge || echo "Namespace not found"
        continue-on-error: true

      - name: üóëÔ∏è Delete LoadBalancer Services First
        run: |
          echo "üîç Deleting LoadBalancer services..."
          kubectl delete svc -n tech-challenge --selector=app=tech-challenge-app || echo "No services found"
          
          echo "‚è≥ Waiting 30 seconds for Load Balancers to be deleted..."
          sleep 30
        continue-on-error: true

      - name: üóëÔ∏è Delete All Resources in Namespace
        run: |
          echo "üóëÔ∏è Deleting all resources in tech-challenge namespace..."
          kubectl delete all --all -n tech-challenge || echo "Failed to delete resources"
          
          # Delete TargetGroupBindings (if any)
          kubectl delete targetgroupbindings --all -n tech-challenge || echo "No TargetGroupBindings found"
          
          # Delete ConfigMaps and Secrets
          kubectl delete configmaps --all -n tech-challenge || echo "No ConfigMaps found"
          kubectl delete secrets --all -n tech-challenge || echo "No Secrets found"
        continue-on-error: true

      - name: üóëÔ∏è Delete Namespace
        run: |
          echo "üóëÔ∏è Deleting tech-challenge namespace..."
          kubectl delete namespace tech-challenge || echo "Namespace not found"
          
          echo "‚è≥ Waiting for namespace to be fully deleted..."
          kubectl wait --for=delete namespace/tech-challenge --timeout=120s || echo "Timeout waiting for namespace deletion"
        continue-on-error: true

  destroy-terraform:
    name: üí• Destroy Terraform Resources
    runs-on: ubuntu-latest
    needs: destroy-kubernetes-resources
    if: always()
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Terraform Init
        run: |
          cd terraform
          terraform init
        continue-on-error: ${{ inputs.force }}

      - name: üìã List Resources Before Destroy
        run: |
          cd terraform
          echo "üìä Current Resources in State:"
          terraform state list || echo "No state found"
        continue-on-error: true

      - name: üí• Terraform Destroy
        run: |
          cd terraform
          
          if [ "${{ inputs.force }}" == "true" ]; then
            echo "‚ö†Ô∏è FORCE MODE: Will attempt to destroy with -auto-approve"
            terraform destroy -auto-approve || echo "Some resources failed to destroy"
          else
            echo "üóëÔ∏è STANDARD MODE: Destroying with -auto-approve"
            terraform destroy -auto-approve
          fi
        continue-on-error: ${{ inputs.force }}

  cleanup-aws-resources:
    name: üßπ Clean Up AWS Resources
    runs-on: ubuntu-latest
    needs: destroy-terraform
    if: always()
    
    steps:
      - name: ‚öôÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üßπ Delete ECR Images
        if: inputs.delete_ecr_images == true
        run: |
          echo "‚ö†Ô∏è Deleting ECR images..."
          
          REPOSITORY="tech-challenge-app"
          
          if aws ecr describe-repositories --repository-names "$REPOSITORY" 2>/dev/null; then
            echo "Found repository: $REPOSITORY"
            
            # Get all image IDs
            IMAGE_IDS=$(aws ecr list-images --repository-name "$REPOSITORY" --query 'imageIds[*]' --output json)
            
            if [ "$IMAGE_IDS" != "[]" ]; then
              echo "Deleting images from $REPOSITORY..."
              aws ecr batch-delete-image --repository-name "$REPOSITORY" --image-ids "$IMAGE_IDS" || true
            else
              echo "No images to delete"
            fi
            
            # Delete repository
            echo "Deleting repository: $REPOSITORY"
            aws ecr delete-repository --repository-name "$REPOSITORY" --force || true
          else
            echo "Repository $REPOSITORY not found"
          fi
          
          echo "‚úÖ ECR cleanup completed"
        continue-on-error: true

      - name: üßπ Clean Up Load Balancers
        if: always()
        run: |
          echo "üîç Checking for orphaned Load Balancers..."
          
          LBS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'tech-challenge')].LoadBalancerArn" \
            --output text)
          
          for lb_arn in $LBS; do
            echo "Deleting Load Balancer: $lb_arn"
            aws elbv2 delete-load-balancer --load-balancer-arn "$lb_arn" || echo "Failed to delete $lb_arn"
          done
          
          echo "‚úÖ Load Balancer cleanup completed"
        continue-on-error: true

      - name: üßπ Clean Up Target Groups
        if: always()
        run: |
          echo "üîç Checking for orphaned Target Groups..."
          
          # Wait a bit for load balancers to be fully deleted
          sleep 15
          
          TGS=$(aws elbv2 describe-target-groups \
            --query "TargetGroups[?contains(TargetGroupName, 'tech-challenge')].TargetGroupArn" \
            --output text)
          
          for tg_arn in $TGS; do
            echo "Deleting Target Group: $tg_arn"
            aws elbv2 delete-target-group --target-group-arn "$tg_arn" || echo "Failed to delete $tg_arn"
          done
          
          echo "‚úÖ Target Group cleanup completed"
        continue-on-error: true

      - name: üßπ Clean Up CloudWatch Log Groups
        if: always()
        run: |
          echo "üîç Cleaning up CloudWatch log groups..."
          
          LOG_GROUPS=$(aws logs describe-log-groups \
            --query "logGroups[?contains(logGroupName, 'tech-challenge-app')].logGroupName" \
            --output text)
          
          for log_group in $LOG_GROUPS; do
            echo "Deleting log group: $log_group"
            aws logs delete-log-group --log-group-name "$log_group" || echo "Failed to delete $log_group"
          done
          
          echo "‚úÖ CloudWatch log groups cleanup completed"
        continue-on-error: true

      - name: üìä Verify Destruction
        if: always()
        run: |
          echo "üîç Checking remaining application resources..."
          
          echo ""
          echo "ECR Repositories:"
          aws ecr describe-repositories \
            --query "repositories[?contains(repositoryName, 'tech-challenge')].repositoryName" || echo "‚úÖ No repositories found"
          
          echo ""
          echo "Load Balancers:"
          aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'tech-challenge')].[LoadBalancerName,LoadBalancerArn]" --output table || echo "‚úÖ No load balancers found"
          
          echo ""
          echo "Target Groups:"
          aws elbv2 describe-target-groups \
            --query "TargetGroups[?contains(TargetGroupName, 'tech-challenge')].[TargetGroupName,TargetGroupArn]" --output table || echo "‚úÖ No target groups found"
          
          echo ""
          echo "CloudWatch Log Groups:"
          aws logs describe-log-groups \
            --query "logGroups[?contains(logGroupName, 'tech-challenge-app')].logGroupName" || echo "‚úÖ No log groups found"
          
          echo ""
          echo "‚úÖ Application destruction verification complete"
        continue-on-error: true

      - name: üìù Summary
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üßπ APPLICATION DESTRUCTION SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Repository: tech-challenge-application"
          echo "Timestamp: $(date)"
          echo "Force Mode: ${{ inputs.force }}"
          echo "Delete ECR Images: ${{ inputs.delete_ecr_images }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
